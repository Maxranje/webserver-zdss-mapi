<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>zdss</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <link rel="stylesheet" title="default" href="/public/mis/sdk/ang.css" />
    <link rel="stylesheet" href="/public/mis/sdk/iconfont.css" />
    <link rel="stylesheet" href="/public/mis/sdk/helper.css" />
    <link rel="stylesheet" href="/public/mis/sdk/mapi.css" />
    <style>
        html,body,.app-wrapper{position:relative;width:100%;height:100%;margin:0;padding:0}
    </style>
</head>

<body>
    <div id="root" class="app-wrapper"></div>
    <script src="/public/mis/sdk/sdk.js"></script>
    <script src="/public/mis/sdk/history.js"></script>    
    <script src="/public/mis/sdk/mapi.js"></script>    
<script>
(function() {
    let amis = amisRequire('amis/embed');
    const match = amisRequire('path-to-regexp').match;
    const history = History.createHashHistory();
    const app = {
        type: 'app',
        brandName: '',
        logo: '/public/sdk/img/logo.png',
        header: {
            type: 'tpl',
            inline: false,
            className: 'w-full',
            tpl:`<div class="zy-header-container">
                    <div class="zy-header-left"></div>
                    <div class="zy-header-right">` + 
                    {% if data.is_reviewer == "1" %} 
                        `<!-- 通知图标 -->
                        <a class="zy-header-link" title="通知" href="/mapi/dashboard/page#/review">
                            <div class="zy-notification-container">
                                <i class="fa fa-bell" id="bell_notice"> <span>通知</span></i>
                                <span class="zy-notification-badge" id="zy-notification_badge"></span>
                                <span></span>
                            </div>
                        </a>` + 
                    {% endif %} 
                        `<!-- 邮箱图标 -->                   
                        <a class="zy-header-link" title="邮箱" href="http://mail.zdss.cn">
                            <i class="fa fa-envelope"> <span>邮箱</span></i> 
                        </a>

                        <!-- 模考平台 -->
                        <a class="zy-header-link" title="中控" href="/choice">
                            <i class="fa fa-reply-all"> <span>中控</span></i> 
                        </a>                        

                        <!-- 退出图标 -->
                        <a class="zy-header-link" title="退出" href="javascript:mysignOut()">
                            <i class="fa fa-sign-out"> <span>退出</span></i>
                        </a>
                    </div>
                </div>`
        },
        api: '/mapi/dashboard/menu'
    };

    {% if data.is_reviewer == "1" %}
    setTimeout(noticeBell, 2000);
    setInterval(noticeBell,30000); 
    {% endif %}
    function normalizeLink(to, location = history.location) {
        to = to || '';
        if (to && to[0] === '#') {
            to = location.pathname + location.search + to
        } else if (to && to[0] === '?') {
            to = location.pathname + to
        }
        const idx = to.indexOf('?');
        const idx2 = to.indexOf('#');
        let pathname = ~idx ? to.substring(0, idx) : ~idx2 ? to.substring(0, idx2) : to;
        let search = ~idx ? to.substring(idx, ~idx2 ? idx2 : undefined) : '';
        let hash = ~idx2 ? to.substring(idx2) : location.hash;
        if (!pathname) {
            pathname = location.pathname
        } else if (pathname[0] != '/' && !/^https?\:\/\//.test(pathname)) {
            let relativeBase = location.pathname;
            const paths = relativeBase.split('/');
            paths.pop();
            let m;
            while ((m = /^\.\.?\//.exec(pathname))) {
                if (m[0] === '../') {
                    paths.pop()
                }
                pathname = pathname.substring(m[0].length)
            }
            pathname = paths.concat(pathname).join('/')
        }
        return pathname + search + hash
    }

    function isCurrentUrl(to, ctx) {
        if (!to) {
            return false
        }
        const pathname = history.location.pathname;
        const link = normalizeLink(to, {
            ...location,
            pathname,
            hash: ''
        });
        if (!~link.indexOf('http') && ~link.indexOf(':')) {
            let strict = ctx && ctx.strict;
            return match(link, {
                decode: decodeURIComponent,
                strict: typeof strict !== 'undefined' ? strict : true
            })(pathname)
        }
        return decodeURI(pathname) === link
    }
    let amisInstance = amis.embed('#root', app, {
        location: history.location
    }, {
        updateLocation: (location, replace) => {
            location = normalizeLink(location);
            if (location === 'goBack') {
                return history.goBack()
            } else if ((!/^https?\:\/\//.test(location) && location === history.location.pathname + history.location.search) || location === history.location.href) {
                return
            } else if (/^https?\:\/\//.test(location) || !history) {
                return (window.location.href = location)
            }
            history[replace ? 'replace' : 'push'](location)
        },
        jumpTo: (to, action) => {
            if (to === 'goBack') {
                return history.goBack()
            }
            to = normalizeLink(to);
            if (isCurrentUrl(to)) {
                return
            }
            if (action && action.actionType === 'url') {
                action.blank === false ? (window.location.href = to) : window.open(to, '_blank');
                return
            } else if (action && action.blank) {
                window.open(to, '_blank');
                return
            }
            if (/^https?:\/\//.test(to)) {
                window.location.href = to
            } else if ((!/^https?\:\/\//.test(to) && to === history.pathname + history.location.search) || to === history.location.href) {} else {
                history.push(to)
            }
        },
        isCurrentUrl: isCurrentUrl,
        theme: 'ang'
    });
    history.listen(state => {
        amisInstance.updateProps({
            location: state.location || state
        })
    })
})();
    </script>
</body>

</html>